#include <benchmark/benchmark.h>

#include <algorithm>
#include <iostream>
#include <memory>
#include <random>

#include "host_code.hpp"

// Problem size
// constexpr auto n = 1920 * 1080;  // ~2M
constexpr auto n = 640 * 480;
constexpr auto min_coord = 0.0f;
constexpr auto range = 1024.0f;
constexpr auto seed = 114514;

// Bench mark config
constexpr auto n_iterations = 50;

void gen_data(const std::unique_ptr<struct pipe>& p) {
  std::mt19937 gen(seed);  // NOLINT(cert-msc51-cpp)
  std::uniform_real_distribution dis(min_coord, min_coord + range);
  std::generate_n(p->u_points, n, [&dis, &gen] {
    return glm::vec4(dis(gen), dis(gen), dis(gen), 1.0f);
  });
}

// --------------------------------------------------
// Morton
// --------------------------------------------------

void BM_GPU_Morton(benchmark::State& st) {
  const auto n_threads = st.range(0);

  auto p = std::make_unique<pipe>(n, min_coord, range, seed);
  gen_data(p);

  for (auto _ : st) {
    cpu::dispatch_ComputeMorton(n_threads, p.get());
  }
}

BENCHMARK(BM_GPU_Morton)
    ->DenseRange(1, 6, 1)
    ->Unit(benchmark::kMillisecond)
    ->Iterations(n_iterations)
    ->ArgName("NumThreads");

// --------------------------------------------------
// Sort
// --------------------------------------------------

// --------------------------------------------------
// Modified GPU bench main
// --------------------------------------------------

BENCHMARK_MAIN();
